// <auto-generated />
using System;
using Kratos.Server.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Kratos.Server.Migrations
{
    [DbContext(typeof(KratosContext))]
    [Migration("20250619190628_Cambios001")]
    partial class Cambios001
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("kratos.Server.Models.Kratos.ActividadEconomicas", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("categoria")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("categoria");

                    b.Property<string>("codigoCiiu")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("codigociiu");

                    b.Property<string>("descripcion")
                        .HasColumnType("text")
                        .HasColumnName("descripcion");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombre");

                    b.HasKey("id");

                    b.ToTable("actividadeconomicas");
                });

            modelBuilder.Entity("kratos.Server.Models.Kratos.Categorias", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("activo")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("activo");

                    b.Property<DateTime>("actualizadoEn")
                        .HasColumnType("datetime")
                        .HasColumnName("actualizadoen");

                    b.Property<int?>("categoriapadreId")
                        .HasColumnType("int")
                        .HasColumnName("categoriapadreid");

                    b.Property<DateTime>("creadoEn")
                        .HasColumnType("datetime")
                        .HasColumnName("creadoen");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("descripcion");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombre");

                    b.HasKey("id");

                    b.HasIndex("categoriapadreId");

                    b.ToTable("categorias");
                });

            modelBuilder.Entity("kratos.Server.Models.Kratos.Empresas", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("actividadId")
                        .HasColumnType("int")
                        .HasColumnName("actividadid");

                    b.Property<bool>("activo")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("activo");

                    b.Property<DateTime>("actualizadoEn")
                        .HasColumnType("date")
                        .HasColumnName("actualizadoen");

                    b.Property<string>("confirmarContrasena")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("confirmarcontrasena");

                    b.Property<string>("contrasena")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("contrasena");

                    b.Property<DateTime>("creadoEn")
                        .HasColumnType("date")
                        .HasColumnName("creadoen");

                    b.Property<string>("dv")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("dv");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("nit")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nit");

                    b.Property<string>("nombreComercial")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombrecomercial");

                    b.Property<string>("razonSocial")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("razonsocial");

                    b.Property<int>("regimenId")
                        .HasColumnType("int")
                        .HasColumnName("regimenid");

                    b.Property<string>("representanteLegal")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("representantelegal");

                    b.Property<string>("telefono")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasColumnName("telefono");

                    b.Property<int>("tiposociedadId")
                        .HasColumnType("int")
                        .HasColumnName("tiposociedadid");

                    b.Property<string>("token")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("token");

                    b.HasKey("id");

                    b.HasIndex("actividadId");

                    b.HasIndex("regimenId");

                    b.HasIndex("tiposociedadId");

                    b.ToTable("empresas");
                });

            modelBuilder.Entity("kratos.Server.Models.Kratos.Impuestos", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("actividadId")
                        .HasColumnType("int")
                        .HasColumnName("actividadid");

                    b.Property<string>("codigo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("codigo");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("descripcion");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombre");

                    b.Property<string>("porcentaje")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("porcentaje");

                    b.Property<int>("regimenId")
                        .HasColumnType("int")
                        .HasColumnName("regimenid");

                    b.Property<int>("sociedadesId")
                        .HasColumnType("int")
                        .HasColumnName("sociedadesid");

                    b.HasKey("id");

                    b.HasIndex("actividadId");

                    b.HasIndex("regimenId");

                    b.HasIndex("sociedadesId");

                    b.ToTable("impuestos");
                });

            modelBuilder.Entity("kratos.Server.Models.Kratos.Inventarios", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("actualizadoEn")
                        .HasColumnType("datetime")
                        .HasColumnName("actualizadoen");

                    b.Property<int>("cantidad")
                        .HasColumnType("int")
                        .HasColumnName("cantidad");

                    b.Property<DateTime>("creadoEn")
                        .HasColumnType("datetime")
                        .HasColumnName("creadoen");

                    b.Property<int>("productoId")
                        .HasColumnType("int")
                        .HasColumnName("productoid");

                    b.Property<int>("puntoventaId")
                        .HasColumnType("int")
                        .HasColumnName("puntoventaid");

                    b.HasKey("id");

                    b.HasIndex("productoId");

                    b.HasIndex("puntoventaId");

                    b.ToTable("inventarios");
                });

            modelBuilder.Entity("kratos.Server.Models.Kratos.Modulos", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombre");

                    b.HasKey("id");

                    b.ToTable("modulos");
                });

            modelBuilder.Entity("kratos.Server.Models.Kratos.Permisos", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("codigo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("codigo");

                    b.Property<bool>("consultar")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("consultar");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("descripcion");

                    b.Property<bool>("editar")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("editar");

                    b.Property<bool>("eliminar")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("eliminar");

                    b.Property<bool>("exportar")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("exportar");

                    b.Property<bool>("importar")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("importar");

                    b.Property<bool>("insertar")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("insertar");

                    b.Property<bool>("leer")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("leer");

                    b.Property<int>("modulosId")
                        .HasColumnType("int")
                        .HasColumnName("modulosid");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombre");

                    b.Property<int?>("permisos")
                        .HasColumnType("int");

                    b.Property<int>("rolesId")
                        .HasColumnType("int")
                        .HasColumnName("rolesid");

                    b.HasKey("id");

                    b.HasIndex("modulosId");

                    b.HasIndex("permisos");

                    b.HasIndex("rolesId");

                    b.ToTable("permisos");
                });

            modelBuilder.Entity("kratos.Server.Models.Kratos.Productos", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("CategoriaId")
                        .HasColumnType("int")
                        .HasColumnName("categoriaid");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("codigo");

                    b.Property<bool>("activo")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("activo");

                    b.Property<DateTime>("actualizadoEn")
                        .HasColumnType("datetime")
                        .HasColumnName("actualizado_en");

                    b.Property<int>("categoriaId")
                        .HasColumnType("int")
                        .HasColumnName("categoria_id");

                    b.Property<decimal>("costo")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("costo");

                    b.Property<DateTime>("creadoEn")
                        .HasColumnType("datetime")
                        .HasColumnName("creado_en");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("descripcion");

                    b.Property<int>("impuestoId")
                        .HasColumnType("int")
                        .HasColumnName("impuestoid");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombre");

                    b.Property<decimal>("precio")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("precio");

                    b.Property<int>("stockMinimo")
                        .HasColumnType("int")
                        .HasColumnName("stock_minimo");

                    b.HasKey("id");

                    b.HasIndex("categoriaId");

                    b.HasIndex("impuestoId");

                    b.ToTable("productos");
                });

            modelBuilder.Entity("kratos.Server.Models.Kratos.PuntoVentas", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<int?>("Usuariosid")
                        .HasColumnType("int");

                    b.Property<bool>("activo")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("activo");

                    b.Property<DateTime>("actualizadoEn")
                        .HasColumnType("datetime")
                        .HasColumnName("actualizadoen");

                    b.Property<DateTime>("creadoEn")
                        .HasColumnType("datetime")
                        .HasColumnName("creadoen");

                    b.Property<string>("direccion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("direccion");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombre");

                    b.Property<int>("responsableId")
                        .HasColumnType("int")
                        .HasColumnName("responsableid");

                    b.Property<string>("telefono")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("telefono");

                    b.HasKey("id");

                    b.HasIndex("Usuariosid");

                    b.HasIndex("responsableId");

                    b.ToTable("puntoventas");
                });

            modelBuilder.Entity("kratos.Server.Models.Kratos.RegimenesTributarios", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("codigo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("codigo");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("descripcion");

                    b.Property<bool>("estado")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("estado");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombre");

                    b.HasKey("id");

                    b.ToTable("regimenestributarios");
                });

            modelBuilder.Entity("kratos.Server.Models.Kratos.Roles", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("descripcion");

                    b.Property<int>("empresaId")
                        .HasColumnType("int")
                        .HasColumnName("empresaid");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombre");

                    b.HasKey("id");

                    b.HasIndex("empresaId");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("kratos.Server.Models.Kratos.TiposSociedades", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("codigo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("codigo");

                    b.Property<string>("descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("descripcion");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombre");

                    b.HasKey("id");

                    b.ToTable("tipossociedades");
                });

            modelBuilder.Entity("kratos.Server.Models.Kratos.TratamientosEmpresas", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("empresaId")
                        .HasColumnType("int")
                        .HasColumnName("empresaid");

                    b.Property<decimal>("porcentaje")
                        .HasMaxLength(100)
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("porcentaje");

                    b.Property<int>("tipoimpuestoId")
                        .HasColumnType("int")
                        .HasColumnName("tipoimpuestoid");

                    b.HasKey("id");

                    b.HasIndex("empresaId");

                    b.HasIndex("tipoimpuestoId");

                    b.ToTable("tratamientosempresas");
                });

            modelBuilder.Entity("kratos.Server.Models.Kratos.Usuarios", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("actualizadoEn")
                        .HasColumnType("datetime")
                        .HasColumnName("actualizadoen");

                    b.Property<string>("apellidos")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("apellidos");

                    b.Property<string>("confirmarContrasena")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("confirmarcontrasena");

                    b.Property<string>("contrasena")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("contrasena");

                    b.Property<DateTime>("creadoEn")
                        .HasColumnType("datetime")
                        .HasColumnName("creadoen");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("email");

                    b.Property<bool>("estado")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("estado");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombres");

                    b.Property<int>("rolesId")
                        .HasColumnType("int")
                        .HasColumnName("rolesid");

                    b.Property<string>("telefono")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("telefono");

                    b.Property<string>("token")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("token");

                    b.HasKey("id");

                    b.HasIndex("rolesId");

                    b.ToTable("usuarios");
                });

            modelBuilder.Entity("kratos.Server.Models.Kratos.Categorias", b =>
                {
                    b.HasOne("kratos.Server.Models.Kratos.Categorias", "categoriapadreFk")
                        .WithMany("Subcategorias")
                        .HasForeignKey("categoriapadreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("categoriapadreFk");
                });

            modelBuilder.Entity("kratos.Server.Models.Kratos.Empresas", b =>
                {
                    b.HasOne("kratos.Server.Models.Kratos.ActividadEconomicas", "empresaactividadFk")
                        .WithMany()
                        .HasForeignKey("actividadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kratos.Server.Models.Kratos.RegimenesTributarios", "empresaregimenFk")
                        .WithMany()
                        .HasForeignKey("regimenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kratos.Server.Models.Kratos.TiposSociedades", "empresasociedadFk")
                        .WithMany()
                        .HasForeignKey("tiposociedadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("empresaactividadFk");

                    b.Navigation("empresaregimenFk");

                    b.Navigation("empresasociedadFk");
                });

            modelBuilder.Entity("kratos.Server.Models.Kratos.Impuestos", b =>
                {
                    b.HasOne("kratos.Server.Models.Kratos.ActividadEconomicas", "impuestoactividadFk")
                        .WithMany()
                        .HasForeignKey("actividadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kratos.Server.Models.Kratos.RegimenesTributarios", "impuestoregimenFk")
                        .WithMany()
                        .HasForeignKey("regimenId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kratos.Server.Models.Kratos.TiposSociedades", "impuestosociedadesFk")
                        .WithMany()
                        .HasForeignKey("sociedadesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("impuestoactividadFk");

                    b.Navigation("impuestoregimenFk");

                    b.Navigation("impuestosociedadesFk");
                });

            modelBuilder.Entity("kratos.Server.Models.Kratos.Inventarios", b =>
                {
                    b.HasOne("kratos.Server.Models.Kratos.Productos", "productoFk")
                        .WithMany()
                        .HasForeignKey("productoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kratos.Server.Models.Kratos.PuntoVentas", "puntoventaFk")
                        .WithMany()
                        .HasForeignKey("puntoventaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("productoFk");

                    b.Navigation("puntoventaFk");
                });

            modelBuilder.Entity("kratos.Server.Models.Kratos.Permisos", b =>
                {
                    b.HasOne("kratos.Server.Models.Kratos.Modulos", "permisosmodulosId")
                        .WithMany()
                        .HasForeignKey("modulosId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kratos.Server.Models.Kratos.Roles", "permisosrolesId")
                        .WithMany()
                        .HasForeignKey("permisos");

                    b.HasOne("kratos.Server.Models.Kratos.Roles", "rol")
                        .WithMany("Permisos")
                        .HasForeignKey("rolesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("permisosmodulosId");

                    b.Navigation("permisosrolesId");

                    b.Navigation("rol");
                });

            modelBuilder.Entity("kratos.Server.Models.Kratos.Productos", b =>
                {
                    b.HasOne("kratos.Server.Models.Kratos.Categorias", "categoriaFk")
                        .WithMany()
                        .HasForeignKey("categoriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kratos.Server.Models.Kratos.TratamientosEmpresas", "impuestoFk")
                        .WithMany()
                        .HasForeignKey("impuestoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("categoriaFk");

                    b.Navigation("impuestoFk");
                });

            modelBuilder.Entity("kratos.Server.Models.Kratos.PuntoVentas", b =>
                {
                    b.HasOne("kratos.Server.Models.Kratos.Usuarios", null)
                        .WithMany("PuntosVenta")
                        .HasForeignKey("Usuariosid");

                    b.HasOne("kratos.Server.Models.Kratos.Usuarios", "usuarioFk")
                        .WithMany()
                        .HasForeignKey("responsableId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("usuarioFk");
                });

            modelBuilder.Entity("kratos.Server.Models.Kratos.Roles", b =>
                {
                    b.HasOne("kratos.Server.Models.Kratos.Empresas", "rolempresaFk")
                        .WithMany()
                        .HasForeignKey("empresaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("rolempresaFk");
                });

            modelBuilder.Entity("kratos.Server.Models.Kratos.TratamientosEmpresas", b =>
                {
                    b.HasOne("kratos.Server.Models.Kratos.Empresas", "empresaFk")
                        .WithMany()
                        .HasForeignKey("empresaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("kratos.Server.Models.Kratos.Impuestos", "impuestosFk")
                        .WithMany()
                        .HasForeignKey("tipoimpuestoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("empresaFk");

                    b.Navigation("impuestosFk");
                });

            modelBuilder.Entity("kratos.Server.Models.Kratos.Usuarios", b =>
                {
                    b.HasOne("kratos.Server.Models.Kratos.Roles", "usuariosrolesFk")
                        .WithMany()
                        .HasForeignKey("rolesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("usuariosrolesFk");
                });

            modelBuilder.Entity("kratos.Server.Models.Kratos.Categorias", b =>
                {
                    b.Navigation("Subcategorias");
                });

            modelBuilder.Entity("kratos.Server.Models.Kratos.Roles", b =>
                {
                    b.Navigation("Permisos");
                });

            modelBuilder.Entity("kratos.Server.Models.Kratos.Usuarios", b =>
                {
                    b.Navigation("PuntosVenta");
                });
#pragma warning restore 612, 618
        }
    }
}
